import React, { useState, useEffect, useRef } from 'react';
import MainLayout from '../components/layout/MainLayout';
import LoadingState from '../components/common/LoadingState';
import ErrorState from '../components/common/ErrorState';
import { supabase } from '../lib/supabase';
import { Employee } from '../types';
import { PDFDownloadLink, Document, Page, Text, View, StyleSheet, BlobProvider, PDFViewer, pdf } from '@react-pdf/renderer';
import { Font } from '@react-pdf/renderer';
import SalaryPDF from '../components/SalaryPDF';
import { User } from '@supabase/supabase-js';
import Head from 'next/head';
import { useTheme } from '../lib/themeContext';
import toast from 'react-hot-toast';
import { FiRefreshCw, FiCalendar } from 'react-icons/fi';
import { useAuth } from '@/lib/hooks/useAuth';
import { SalaryForm } from '@/components/salary/SalaryForm';
import { SalarySummary } from '@/components/salary/SalarySummary';
import { 
  BasicSalaryCalculation, 
  defaultSalaryCalc,
  calculateOvertimePay,
  calculateVariablePay,
  calculateTotalSalary,
  testCalculation 
} from '@/lib/calculations/salary';
import {
  saveInputsToLocalStorage,
  loadInputsFromLocalStorage,
  clearSavedInputs
} from '@/lib/storage/salary';

import { useSession, useSupabaseClient } from '@supabase/auth-helpers-react';
import { useRouter } from 'next/router';

// Register fonts - use direct font import
Font.register({
  family: 'Roboto',
  format: "truetype",
  fonts: [
    {
      src: 'https://cdnjs.cloudflare.com/ajax/libs/ink/3.1.10/fonts/Roboto/roboto-light-webfont.ttf',
      fontWeight: 'normal'
    },
    {
      src: 'https://cdnjs.cloudflare.com/ajax/libs/ink/3.1.10/fonts/Roboto/roboto-bold-webfont.ttf',
      fontWeight: 'bold'
    }
  ]
});

// Add the debounce hook
const useDebounce = (func: (...args: any[]) => void, delay: number) => {
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  return (...args: any[]) => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    
    timeoutRef.current = setTimeout(() => {
      func(...args);
    }, delay);
  };
};

interface Shift {
  id: string;
  employee_id: string;
  start_time: string;
  end_time: string;
  shift_type: string;
}

interface SalaryRecord {
  id: string;
  employee_id: string;
  month: string;
  basic_salary: number;
  cost_of_living: number;
  shift_allowance: number;
  overtime_hours: number;
  overtime_pay: number;
  variable_pay: number;
  deduction: number;
  total_salary: number;
  exchange_rate: number;
}

const calculateOvertimeHours = (shifts: Shift[]) => {
  if (!shifts || shifts.length === 0) return 0;
  
  // Filter out shifts that don't have both start and end times
  const validShifts = shifts.filter((s: Shift) => s.start_time && s.end_time);
  
  // Calculate total overtime hours
  const overtimeHours = validShifts.reduce((acc: number, shift: Shift) => {
    try {
      const startTime = new Date(shift.start_time);
      const endTime = new Date(shift.end_time);
      
      // Validate dates
      if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
        console.warn('Invalid date found in shift:', shift);
        return acc;
      }
      
      const duration = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60); // Convert to hours
      return acc + (duration > 0 ? duration : 0); // Only count positive durations
    } catch (err) {
      console.error('Error calculating hours for shift:', shift, err);
      return acc;
    }
  }, 0);
  
  return Math.round(overtimeHours * 100) / 100; // Round to 2 decimal places
};

export default function Salary() {
  const { isDarkMode } = useTheme();
  const { user } = useAuth();
  const session = useSession();
  const supabase = useSupabaseClient();
  const router = useRouter();
  
  const [employee, setEmployee] = useState<Employee | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>('');
  const [authError, setAuthError] = useState<string>('');
  const [calculationLoading, setCalculationLoading] = useState(false);
  const [pdfLoading, setPdfLoading] = useState(false);
  const [exchangeRate, setExchangeRate] = useState(31.50); // Default fallback
  const [rateLastUpdated, setRateLastUpdated] = useState('');
  
  // Date selection state
  const currentDate = new Date();
  const currentYear = currentDate.getFullYear();
  const currentMonth = currentDate.getMonth() + 1; // 1-12 format
  
  const [selectedMonth, setSelectedMonth] = useState(currentMonth);
  const [selectedYear, setSelectedYear] = useState(currentYear);
  const [month, setMonth] = useState(`${currentYear}-${String(currentMonth).padStart(2, '0')}`);
  
  const [salaryHistory, setSalaryHistory] = useState<any[]>([]);
  const [isAdmin, setIsAdmin] = useState(false);
  const [authError, setAuthError] = useState<string | null>(null);
  const [pdfModalOpen, setPdfModalOpen] = useState(false);
  const [calculationResults, setCalculationResults] = useState<BasicSalaryCalculation | null>(null);

  const [salaryCalc, setSalaryCalc] = useState<BasicSalaryCalculation>({} as BasicSalaryCalculation);

  // Add state for overtime data
  const [scheduleOvertimeHours, setScheduleOvertimeHours] = useState(0);
  const [manualOvertimeHours, setManualOvertimeHours] = useState(0);

  // Create a debounced version of the save function with 1 second delay
  const debouncedSaveToLocalStorage = useDebounce((data: BasicSalaryCalculation) => {
    if (employee?.id) {
      saveInputsToLocalStorage(data, employee.id);
    }
  }, 1000);

  // Function to fetch overtime hours for the selected month
  const fetchOvertimeHours = async () => {
    if (!employee) {
      console.log('No employee data, skipping overtime fetch');
      return;
    }

    try {
      // Calculate start and end dates for the selected month
      const startDate = new Date(selectedYear, selectedMonth - 1, 1);
      startDate.setHours(0, 0, 0, 0);  // Set to beginning of day
      
      const endDate = new Date(selectedYear, selectedMonth, 0); // Last day of the month
      endDate.setHours(23, 59, 59, 999);  // Set to end of day
      
      console.log('Date range calculation (with time):', {
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString(),
        startDateString: startDate.toISOString().split('T')[0],
        endDateString: endDate.toISOString().split('T')[0],
        year: selectedYear,
        month: selectedMonth
      });

      // Fetch all shifts for the month
      const { data: shifts, error: shiftsError } = await supabase
        .from('shifts')
        .select('*')
        .eq('employee_id', employee.id)
        .gte('start_time', `${selectedYear}-${selectedMonth}-01`)
        .lt('start_time', `${selectedYear}-${selectedMonth + 1}-01`);

      if (shiftsError) {
        console.error('Error fetching shifts:', shiftsError);
        return;
      }

      console.log('Fetching shifts with params:', {
        employee_id: employee.id,
        start_date: `${selectedYear}-${selectedMonth}-01`,
        end_date: `${selectedYear}-${selectedMonth + 1}-01`,
        query: 'gte start_date AND lt end_date'
      });
      
      console.log('All shifts found:', shifts?.length);
      console.log('Raw shifts data:', shifts);

      // Log detailed shift information
      console.log('Detailed shift information:', shifts?.map(s => ({
        date: s.start_time,
        type: s.shift_type,
        notes: s.notes
      })));

      // Get unique shift types
      const shiftTypes = Array.from(new Set(shifts?.map((s: Shift) => s.shift_type) || []));
      console.log('Shift types found:', shiftTypes);

      // Log all shifts with their types for debugging
      console.log('Shifts by type:', shifts?.reduce((acc, shift: Shift) => {
        const type = shift.shift_type || 'unknown';
        acc[type] = (acc[type] || 0) + 1;
        return acc;
      }, {}));

      // Filter overtime shifts - only count actual overtime shifts
      const overtimeShifts = shifts?.filter((s: Shift) => {
        const type = (s.shift_type || '').toLowerCase().trim();
        console.log('Checking shift type:', { original: s.shift_type, normalized: type });
        return type === 'overtime';
      }) || [];
      
      console.log('Overtime shifts details:', overtimeShifts);
      console.log('Total overtime shifts found:', overtimeShifts.length);

      // Calculate total overtime hours
      const totalOvertimeHours = calculateOvertimeHours(overtimeShifts);
      setScheduleOvertimeHours(totalOvertimeHours);
      
      console.log(`Found ${overtimeShifts.length} overtime shifts, total hours: ${totalOvertimeHours}`);

    } catch (error: any) {
      console.error('Error calculating overtime hours:', error);
      toast.error(`Error fetching shifts: ${error.message}`);
    }
  };

  // Update the handleDateChange function to fetch overtime data
  const handleDateChange = (year: number, month: number) => {
    setSelectedYear(year);
    setSelectedMonth(month);
    setMonth(`${year}-${String(month).padStart(2, '0')}`);
    
    // Look for existing salary record for this month/year
    if (salaryHistory && salaryHistory.length > 0) {
      const formattedMonth = `${year}-${String(month).padStart(2, '0')}`;
      const existingRecord = salaryHistory.find(salary => {
        const salaryDate = new Date(salary.month);
        const salaryYear = salaryDate.getFullYear();
        const salaryMonth = salaryDate.getMonth() + 1;
        return salaryYear === year && salaryMonth === month;
      });
      
      if (existingRecord) {
        // Use existing record
        const scheduleHours = existingRecord.overtime_hours || 0;
        const manualHours = existingRecord.manual_overtime_hours || 0; // Keep manual hours from record
        
        setScheduleOvertimeHours(scheduleHours);
        setManualOvertimeHours(manualHours);
        
        setSalaryCalc({
          basicSalary: existingRecord.basic_salary,
          costOfLiving: existingRecord.cost_of_living,
          shiftAllowance: existingRecord.shift_allowance,
          overtimeHours: scheduleHours + manualHours, // Total overtime is sum of both
          manualOvertimeHours: manualHours,
          overtimePay: existingRecord.overtime_pay,
          variablePay: existingRecord.variable_pay,
          deduction: existingRecord.deduction,
          totalSalary: existingRecord.total_salary,
          exchangeRate: existingRecord.exchange_rate,
        });
        toast.success(`Loaded existing salary record for ${new Date(existingRecord.month).toLocaleDateString('en-US', {month: 'long', year: 'numeric'})}`);
      }
    }

    // Fetch overtime hours for the new month
    fetchOvertimeHours();
  };

  // Update the handleInputChange function to use the imported calculation functions
  const handleInputChange = (field: keyof BasicSalaryCalculation, value: number) => {
    // Create the updated calculation object
    const newCalc = {
      ...salaryCalc,
      [field]: value,
    };
    
    // Handle manual overtime input
    if (field === 'manualOvertimeHours') {
      setManualOvertimeHours(value);
      const totalOvertimeHours = scheduleOvertimeHours + value;
      newCalc.overtimeHours = totalOvertimeHours;
      
      // Calculate overtime pay
      const overtimePay = calculateOvertimePay(newCalc.basicSalary || 0, newCalc.costOfLiving || 0, totalOvertimeHours);
      newCalc.overtimePay = overtimePay;
      
      // Calculate variable pay
      const variablePay = calculateVariablePay(
        newCalc.basicSalary || 0,
        newCalc.costOfLiving || 0,
        newCalc.shiftAllowance || 0,
        overtimePay,
        exchangeRate
      );
      newCalc.variablePay = variablePay;
      
      // Recalculate total salary
      newCalc.totalSalary = calculateTotalSalary(
        newCalc.basicSalary || 0,
        newCalc.costOfLiving || 0,
        newCalc.shiftAllowance || 0,
        overtimePay,
        variablePay,
        newCalc.deduction || 0
      );
    }
    
    setSalaryCalc(newCalc);
    // Save to localStorage with debounce
    if (employee?.id) {
      debouncedSaveToLocalStorage(newCalc);

  // Modified useEffects to guarantee localStorage priority
  useEffect(() => {
    fetchSalaryHistory();
  }, [session, employee]);

  useEffect(() => {
    // Fetch overtime hours when component mounts
    if (user) {
      fetchOvertimeHours();
    }
  }, []);

  // ... (rest of the code remains the same)

  const fetchSalaryHistory = async () => {
    try {
      if (!session || !employee) {
        setAuthError('Please sign in to view salary history');
        return;
      }

      const { data, error } = await supabase
        .from('salaries')
        .select('*')
        .eq('employee_id', employee.id)
        .order('month', { ascending: false });

      if (error) {
        console.error('Error fetching salary history:', error);
        toast.error('Failed to fetch salary history');
        return;
      }

      setSalaryHistory(data || []);

      // Check if we need to auto-load the currently selected month/year
      if (data && data.length > 0 && selectedMonth && selectedYear) {
        const currentMonthSalary = data.find((salary: any) => {
          const salaryDate = new Date(salary.month);
          return salaryDate.getFullYear() === selectedYear && salaryDate.getMonth() + 1 === selectedMonth;
        });

        if (currentMonthSalary) {
          setSalaryCalc({
            ...defaultSalaryCalc,
            basicSalary: currentMonthSalary.basic_salary,
            costOfLiving: currentMonthSalary.cost_of_living,
            shiftAllowance: currentMonthSalary.shift_allowance,
            overtimeHours: currentMonthSalary.overtime_hours,
            deduction: currentMonthSalary.deduction,
            totalSalary: currentMonthSalary.total_salary
          });
        }
      }
    } catch (error) {
      console.error('Error fetching salary history:', error);
      toast.error('Failed to fetch salary history');
    } finally {
      setLoading(false);
      // More detailed error reporting
      if (error instanceof Error) {
        toast.error(`Error fetching salary history: ${error.message}`);
      } else {
        toast.error('Error fetching salary history: Unknown error');
      }
    }
  };

  const manuallyUpdateRate = async () => {
    try {
      console.log('Attempting to update rate...');
      
      // First check if user is still authenticated
      const { data: { session }, error: authError } = await supabase.auth.getSession();
      
      if (authError || !session) {
        alert('Authentication error. Please sign in again.');
        return;
      }
      
      const response = await fetch('/api/admin/update-exchange-rate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session.access_token}`
        }
      });
      
      console.log('Response status:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('Update successful, new rate:', data.rate);
        
        // Update local state
        setExchangeRate(data.rate);
        const now = new Date();
        setRateLastUpdated(now.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        }));
        
        alert(`Rate updated successfully to: ${data.rate}`);
      } else {
        let errorMessage = 'Failed to update rate';
        try {
          const errorData = await response.json();
          errorMessage = errorData.error || errorMessage;
        } catch (e) {
          const errorText = await response.text();
          errorMessage = errorText || errorMessage;
        }
        console.error('Update failed:', errorMessage);
        alert(`Failed to update rate: ${errorMessage}`);
      }
    } catch (error) {
      console.error('Error in update function:', error);
      alert(`Error updating rate: ${error}`);
    }
  };

  // Add a test function for authentication
  const testAuth = async () => {
    try {
      // Get the current session to extract the access token
      const { data: { session }, error: authError } = await supabase.auth.getSession();
      
      if (authError) {
        console.error('Session error:', authError);
      }
      
      // Prepare headers based on session availability
      const headers: HeadersInit = {};
      if (session?.access_token) {
        headers['Authorization'] = `Bearer ${session.access_token}`;
        console.log('Using access_token in Authorization header');
      } else {
        console.log('No access_token available');
      }
      
      const response = await fetch('/api/auth-test', {
        headers,
        credentials: 'include', // Include cookies as fallback
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        alert(`Auth test failed: ${data.message || data.error || 'Unknown error'}`);
        console.error('Auth test failed:', data);
      } else {
        alert(`Auth test successful! User: ${data.user.email} (Method: ${data.authMethod})`);
        console.log('Auth test successful:', data);
      }
    } catch (error) {
      alert(`Auth test error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      console.error('Auth test error:', error);
    }
  };

  // Update the fetchData function to apply localStorage data AFTER database loading
  const fetchData = async () => {
    try {
      setAuthError(null);
      
      // Fetch exchange rate from cached endpoint
      try {
        console.log("Fetching exchange rate...");
        const rateResponse = await fetch('/api/exchange-rate');
        
        if (rateResponse.ok) {
          const rateData = await rateResponse.json();
          if (rateData.rate) {
            setExchangeRate(rateData.rate);
            const lastUpdated = new Date(rateData.lastUpdated);
            setRateLastUpdated(lastUpdated.toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            }));
          }
        } else {
          console.warn("API failed, using fallback rate");
        }
      } catch (err) {
        console.warn("Exchange rate API error, using fallback", err);
      }

      // Fetch employee data
      const { data: userData, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        setAuthError('Authentication failed. Please try logging in again.');
        return;
      }

      if (!userData?.user) {
        setAuthError('No user found. Please log in.');
        return;
      }

      const { data: employeeData, error: employeeError } = await supabase
        .from('employees')
        .select('*')
        .eq('id', userData.user.id)
        .single();

      if (employeeError) {
        if (employeeError.code === 'PGRST116') {
          setAuthError('Employee record not found. Please contact your administrator.');
        } else {
          setAuthError(`Error fetching employee data: ${employeeError.message}`);
        }
        return;
      }

      // Set employee data first
      setEmployee(employeeData);

      // First try to get the latest calculation
      const { data: calcData, error: calcError } = await supabase
        .from('salary_calculations')
        .select('*')
        .eq('employee_id', userData.user.id)
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (!calcError && calcData) {
        setSalaryCalc({
          basicSalary: calcData.basic_salary,
          costOfLiving: calcData.cost_of_living,
          shiftAllowance: calcData.shift_allowance,
          overtimeHours: calcData.overtime_hours,
          manualOvertimeHours: calcData.manual_overtime_hours,
          overtimePay: calcData.overtime_pay,
          variablePay: calcData.variable_pay,
          deduction: calcData.deduction,
          totalSalary: calcData.total_salary,
          exchangeRate: calcData.exchange_rate,
        });
      } else {
        // If no calculation found, try to get from salaries table
        const { data: salaryData, error: salaryError } = await supabase
          .from('salaries')
          .select('*')
          .eq('employee_id', userData.user.id)
          .order('month', { ascending: false })
          .limit(1)
          .single();

        if (!salaryError && salaryData) {
          setSalaryCalc({
            basicSalary: salaryData.basic_salary,
            costOfLiving: salaryData.cost_of_living,
            shiftAllowance: salaryData.shift_allowance,
            overtimeHours: salaryData.overtime_hours,
            manualOvertimeHours: 0,
            overtimePay: salaryData.overtime_pay,
            variablePay: salaryData.variable_pay,
            deduction: salaryData.deduction,
            totalSalary: salaryData.total_salary,
            exchangeRate: salaryData.exchange_rate,
          });
        }
      }

      // Fetch other data like history
      await fetchSalaryHistory();

      // Check if user is admin
      const { data: adminData, error: adminError } = await supabase
        .from('employees')
        .select('is_admin')
        .eq('id', userData.user.id)
        .single();
      
      if (!adminError && adminData) {
        setIsAdmin(adminData.is_admin || false);
      }

    } catch (error) {
      console.error('Error fetching data:', error);
      setAuthError('An unexpected error occurred. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const saveSalary = async () => {
    if (!employee || !exchangeRate) {
      toast.error('Missing employee information or exchange rate');
      return;
    }

    if (!session) {
      toast.error('Please sign in to save salary');
      return;
    }
    
    setCalculationLoading(true);
    
    try {
      const salaryData: Omit<SalaryRecord, 'id'> = {
        employee_id: employee.id,
        month: `${month}-01`,
        basic_salary: salaryCalc.basicSalary || 0,
        cost_of_living: salaryCalc.costOfLiving || 0,
        shift_allowance: salaryCalc.shiftAllowance || 0,
        overtime_hours: (scheduleOvertimeHours || 0) + (manualOvertimeHours || 0),
        overtime_pay: salaryCalc.overtimePay || 0,
        variable_pay: salaryCalc.variablePay || 0,
        deduction: salaryCalc.deduction || 0,
        total_salary: salaryCalc.totalSalary || 0,
        exchange_rate: exchangeRate
      };
      
      // Check if a record for this month already exists
      const { data: existingData, error: existingError } = await supabase
        .from('salaries')
        .select('id')
        .eq('employee_id', employee.id)
        .eq('month', `${month}-01`)
        .limit(1);
      
      if (existingError) {
        throw new Error(`Error checking for existing records: ${existingError.message}`);
      }
      
      // Upsert the record
      const { error } = await supabase
        .from('salaries')
        .upsert(salaryData, {
          onConflict: 'employee_id,month',
          ignoreDuplicates: false
        });
      
      if (error) throw error;
      
      toast.success('Salary saved successfully!');
      
      // Refresh salary history
      await fetchSalaryHistory();
      
    } catch (error: any) {
      console.error('Error saving salary:', error);
      toast.error(`Error saving salary: ${error.message}`);
    } finally {
      setCalculationLoading(false);
    }
  };
  
  const deleteSalary = async (salaryId: string) => {
    if (!session) {
      toast.error('Please sign in to delete salary records');
      return;
    }
    
    // Confirm before deletion
    if (!confirm('Are you sure you want to delete this salary record? This action cannot be undone.')) {
      return;
    }
    
    try {
      const { error } = await supabase
        .from('salaries')
        .delete()
        .match({ id: salaryId });
      
      if (error) throw error;
      
      toast.success('Salary record deleted successfully!');
      
      // Refresh the salary history
      await fetchSalaryHistory();
      
    } catch (error: any) {
      console.error('Error deleting salary:', error);
      toast.error(`Error deleting salary: ${error.message}`);
    }
  };

  // Add near the other functions in the component
  const downloadPDF = (salary: any) => {
    try {
      const MyDocument = () => (
        <Document>
          <SalaryPDF 
            salary={{
              basicSalary: salary?.basic_salary || 0,
              costOfLiving: salary?.cost_of_living || 0,
              shiftAllowance: salary?.shift_allowance || 0,
              overtimeHours: salary?.overtime_hours || 0,
              overtimePay: salary?.overtime_pay || 0,
              variablePay: salary?.variable_pay || 0,
              deduction: salary?.deduction || 0,
              totalSalary: salary?.total_salary || 0,
              exchangeRate: salary?.exchange_rate || exchangeRate,
              manualOvertimeHours: salary?.overtime_hours || 0
            }}
            employee={employee as Employee}
            month={salary.month}
            exchangeRate={salary.exchange_rate || exchangeRate}
          />
        </Document>
      );
      
      const pdfBlob = pdf(<MyDocument />).toBlob();
      pdfBlob.then(blob => {
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `${employee?.name}_salary_${new Date(salary.month).toISOString().substring(0, 7)}.pdf`;
        link.click();
        // Clean up the URL object after download
        setTimeout(() => URL.revokeObjectURL(url), 100);
      }).catch(error => {
        console.error('PDF generation error:', error);
        toast.error(`Error generating PDF: ${error.message || 'Unknown error'}`);
      });
    } catch (error) {
      console.error('PDF generation error:', error);
      toast.error(`Error generating PDF: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  // Call test calculation
  useEffect(() => {
    const results = testCalculation();
    console.log('Test Calculation Results:', results);
  }, []);

  // Add the calculate salary function
  const calculateSalary = async () => {
    setCalculationLoading(true);
    
    // Extract values from state - all in EGP
    const basicSalary = salaryCalc.basicSalary || 0;
    const costOfLiving = salaryCalc.costOfLiving || 0;
    const shiftAllowance = salaryCalc.shiftAllowance || 0;
    const overtimeHours = salaryCalc.overtimeHours || 0;
    const deduction = salaryCalc.deduction || 0;
    
    // Calculate overtime pay
    const overtimePay = calculateOvertimePay(basicSalary, costOfLiving, overtimeHours);
    
    // Calculate variable pay
    const variablePay = calculateVariablePay(
      basicSalary,
      costOfLiving,
      shiftAllowance,
      overtimePay,
      exchangeRate
    );
    
    // Calculate total salary
    const totalSalary = calculateTotalSalary(
      basicSalary,
      costOfLiving,
      shiftAllowance,
      overtimePay,
      variablePay,
      deduction
    );
    
    const newCalc = {
      ...salaryCalc,
      overtimePay,
      variablePay,
      totalSalary,
      exchangeRate,
    };
    
    setSalaryCalc(newCalc);
    
    // Save inputs to localStorage whenever calculation happens
    if (employee?.id) {
      saveInputsToLocalStorage(newCalc, employee.id);
    }
    
    setCalculationLoading(false);
  };

  // Update the clear function to handle React events
  const handleClearSavedInputs = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
    if (employee?.id) {
      if (clearSavedInputs(employee.id)) {
        setSalaryCalc(defaultSalaryCalc);
        alert('Form reset to default values. Your saved inputs have been cleared.');
      } else {
        alert('Error clearing saved data. Please try again.');
      }
    } else {
      alert('Cannot clear saved data: Employee information not available');
    }
  };

  interface Shift {
    start_time: string;
    end_time: string;
  }

  const calculateOvertimeHours = (shifts: Shift[]) => {
    if (!shifts || shifts.length === 0) return 0;

    // Filter out shifts that don't have both start and end times
    const validShifts = shifts.filter((s: Shift) => s.start_time && s.end_time);
    
    // Calculate total overtime hours
    const overtimeHours = validShifts.reduce((acc: number, shift: Shift) => {
      const startTime = new Date(shift.start_time);
      const endTime = new Date(shift.end_time);
      
      // Validate dates
      if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
        console.warn('Invalid date found in shift:', shift);
        return acc;
      }

      const duration = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60); // Convert to hours
      
      // Only count positive durations
      return acc + (duration > 0 ? duration : 0);
    }, 0);
    
    return Math.round(overtimeHours * 100) / 100; // Round to 2 decimal places
  };

  const calculateOvertimePay = (basicSalary: number, costOfLiving: number, overtimeHours: number) => {
    const hourlyRate = ((basicSalary + costOfLiving) / 30) / 8; // Daily rate divided by 8 hours
    return hourlyRate * 1.5 * overtimeHours; // Overtime is paid at 1.5x rate
  };

  const calculateVariablePay = (
    basicSalary: number,
    costOfLiving: number,
    shiftAllowance: number,
    overtimePay: number,
    exchangeRate: number
  ) => {
    // Calculate variable pay components
    const baseVariablePay = (basicSalary + costOfLiving) * 0.1; // 10% of base salary
    const totalVariablePay = baseVariablePay + shiftAllowance + overtimePay;
    
    // Convert to local currency using exchange rate
    return totalVariablePay * exchangeRate;
  };

  const calculateTotalSalary = (
    basicSalary: number,
    costOfLiving: number,
    shiftAllowance: number,
    overtimePay: number,
    variablePay: number,
    deduction: number
  ) => {
    return basicSalary + costOfLiving + shiftAllowance + overtimePay + variablePay - deduction;
  };

  if (loading) {
    return (
      <MainLayout title="Salary - SalaryCursor">
        <Head>
          <title>Salary Management - SalaryCursor</title>
          <meta name="description" content="Manage and calculate salary information" />
        </Head>
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
          <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
            <div className="px-4 py-6 sm:px-0">
              <LoadingState message="Loading salary information..." />
            </div>
          </div>
        </div>
      </MainLayout>
    );
  }

  return (
    <MainLayout title="Salary - SalaryCursor">
      <Head>
        <title>Salary Management - SalaryCursor</title>
        <meta name="description" content="Manage and calculate salary information" />
      </Head>

      <div className="px-2 sm:px-4 lg:px-8 py-4 sm:py-6">
        {authError && (
          <div className="bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 p-3 sm:p-4 rounded-md mb-4 sm:mb-6">
            <p className="text-sm sm:text-base">{authError}</p>
            <button 
              onClick={() => window.location.href = '/login'} 
              className="mt-2 text-sm text-red-700 dark:text-red-300 underline"
            >
              Go to Login
            </button>
          </div>
        )}

        {/* Header section */}
        <section className="mb-4 sm:mb-8">
          <h1 className="text-2xl sm:text-3xl font-medium text-apple-gray-dark dark:text-dark-text-primary mb-1 sm:mb-2">Salary Management</h1>
          <p className="text-sm sm:text-base text-apple-gray dark:text-dark-text-secondary">Calculate and manage salary information for {employee?.name}</p>
        </section>

        {/* Main content grid */}
        <div className="grid gap-4 sm:gap-8 lg:grid-cols-3">
          {/* Salary Calculator Card */}
          <div className="lg:col-span-2 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
            <div className="p-4 sm:p-6 border-b border-gray-200 dark:border-gray-700">
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0">
                <h2 className="text-lg sm:text-xl font-semibold text-gray-900 dark:text-white">Salary Calculator</h2>
                <button
                  onClick={handleClearSavedInputs}
                  className="w-full sm:w-auto px-3 py-1.5 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                >
                  Clear
                </button>
              </div>
            </div>

            {/* Month/Year Picker */}
            <div className="p-4 sm:p-6 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900">
              {loading ? (
                <LoadingState message="Loading salary information..." />
              ) : authError ? (
                <ErrorState
                  title="Authentication Error"
                  message={authError}
                  onRetry={() => window.location.reload()}
                />
              ) : (
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Month
                    </label>
                    <select 
                      value={selectedMonth}
                      onChange={(e) => handleDateChange(selectedYear, parseInt(e.target.value))}
                      className="w-full px-3 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400"
                    >
                      <option value={1}>January</option>
                      <option value={2}>February</option>
                      <option value={3}>March</option>
                      <option value={4}>April</option>
                      <option value={5}>May</option>
                      <option value={6}>June</option>
                      <option value={7}>July</option>
                      <option value={8}>August</option>
                      <option value={9}>September</option>
                      <option value={10}>October</option>
                      <option value={11}>November</option>
                      <option value={12}>December</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Year
                    </label>
                    <select 
                      value={selectedYear}
                      onChange={(e) => handleDateChange(parseInt(e.target.value), selectedMonth)}
                      className="w-full px-3 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400"
                    >
                      {/* Generate years from 2020 to current year + 1 */}
                      {Array.from({ length: currentYear - 2020 + 2 }, (_, i) => (
                        <option key={2020 + i} value={2020 + i}>
                          {2020 + i}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  <div className="flex items-end">
                    <button
                      onClick={() => handleDateChange(currentYear, currentMonth)}
                      className="w-full px-4 py-2 text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-900"
                    >
                      <div className="flex items-center justify-center">
                        <FiRefreshCw className="w-4 h-4 mr-2" />
                        Current Month
                      </div>
                    </button>
                  </div>
                </div>
              )}
              
              {salaryHistory && salaryHistory.length > 0 && (
                <div className="mt-3 flex items-center">
                  {salaryHistory.find(salary => {
                    const salaryDate = new Date(salary.month);
                    return salaryDate.getFullYear() === selectedYear && salaryDate.getMonth() + 1 === selectedMonth;
                  }) 
                    ? <div className="flex items-center text-green-600 dark:text-green-400">
                        <svg className="w-4 h-4 mr-1.5" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />

          <div className="p-4 sm:p-6">
            {salaryCalc.totalSalary > 0 ? (
              <div className="space-y-4 sm:space-y-6">
                <div>
                  <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Total Salary</p>
                  <p className="mt-1 text-2xl sm:text-3xl font-semibold text-gray-900 dark:text-white">
                    EGP {salaryCalc.totalSalary.toLocaleString('en-US', { maximumFractionDigits: 2 })}
                  </p>
                </div>

                <div className="space-y-2 sm:space-y-3">
                  <button
                    onClick={calculateSalary}
                    disabled={calculationLoading}
                    className="w-full px-4 py-2 text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-900 disabled:opacity-50"
                  >
                    {calculationLoading ? 'Calculating...' : 'Calculate'}
                  </button>

                  <button
                    onClick={saveSalary}
                    disabled={calculationLoading || !salaryCalc.totalSalary}
                    className="w-full px-4 py-2 text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 dark:bg-green-500 dark:hover:bg-green-600 focus:ring-2 focus:ring-offset-2 focus:ring-green-500 dark:focus:ring-offset-gray-900 disabled:opacity-50"
                  >
                    {calculationLoading ? 'Saving...' : 'Save Salary'}
                  </button>

                  <button
                    onClick={() => downloadPDF(salaryCalc)}
                    className="w-full px-4 py-2 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 dark:focus:ring-offset-gray-900"
                  >
                    Generate PDF
                  </button>
                </div>
              </div>
            ) : (
              <div className="text-center py-6 sm:py-8">
                <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
                <p className="mt-2 text-sm font-medium text-gray-900 dark:text-white">No calculations yet</p>
                <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">Enter values and click Calculate</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Salary History Section */}
      <div className="mt-4 sm:mt-8 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
        <div className="p-4 sm:p-6 border-b border-gray-200 dark:border-gray-700">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0">
            <h2 className="text-lg sm:text-xl font-semibold text-gray-900 dark:text-white">Salary History</h2>
            <button
              onClick={fetchSalaryHistory}
              className="flex items-center justify-center px-3 py-1.5 text-sm font-medium rounded-md text-blue-600 dark:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              <FiRefreshCw className="w-4 h-4 mr-1.5" />
              Refresh
            </button>
          </div>
        </div>

        <div className="overflow-x-auto rounded-lg border dark:border-gray-700">
          <div className="min-w-full inline-block align-middle">
            <div className="overflow-hidden">
              <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead>
                  <tr className="bg-gray-50 dark:bg-gray-900">
                    <th scope="col" className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Month</th>
                    <th scope="col" className="px-3 sm:px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Basic Salary</th>
                    <th scope="col" className="px-3 sm:px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Total</th>
                    <th scope="col" className="px-3 sm:px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                  {salaryHistory && salaryHistory.length > 0 ? (
                    salaryHistory.map((salary, index) => (
                      <tr 
                        key={index}
                        className={index % 2 === 0 ? 'bg-white dark:bg-gray-800' : 'bg-gray-50 dark:bg-gray-900'}
                      >
                        <td className="px-3 sm:px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                          {new Date(salary.month).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                        </td>
                        <td className="px-3 sm:px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 dark:text-white">
                          EGP {salary.basicSalary.toLocaleString('en-US', { maximumFractionDigits: 2 })}
                        </td>
                        <td className="px-3 sm:px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 dark:text-white">
                          EGP {salary.totalSalary.toLocaleString('en-US', { maximumFractionDigits: 2 })}
                        </td>
                        <td className="px-3 sm:px-6 py-4 whitespace-nowrap text-sm text-right">
                          <button
                            onClick={() => deleteSalary(salary.id)}
                            className="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300"
                          >
                            Delete
                          </button>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan={4} className="px-3 sm:px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                        No salary records found
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </MainLayout>
  );